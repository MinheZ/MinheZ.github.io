<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java内存区域]]></title>
    <url>%2F2018%2F12%2F04%2FJava%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[1 运行时数据区域Java虚拟机在执行Java程序的过程中会把它所管理的内存区划分为若干个不同的数据区域。 1.1 程序计数器程序计数器(Program Counter Register)记录的是正在执行的虚拟机字节码指令的地址；如果执行的是本地(Native)方法，这个计数器的值为空(Undefined)。 特点： 此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。 线程私有 1.2 Java虚拟机栈每个方法在执行的同时会创建一个栈帧(Stack Frame)用于存储局部变量、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。可以通过-Xss这个虚拟机参数来指定每个线程的Java虚拟机栈内存的大小1java -Xss512M JackTheJava 局部变量表：存放了编译期可知的各种基本数据类型(boolean,byte,char,short,int,float,long,double)。对象引用(reference类型，不等同于对象本身，可能只是一个指向对象起始地址的指针) 该区域规定了两种异常情况： 如果线程请求的栈深度大于虚拟机所允许的最大深度，则抛出StackOverflow异常 栈内存进行动态扩展时无法申请到足够的内存，则抛出OutOfMemory异常 1.3 本地方法栈本地方法栈(Native Method Stack)与Java虚拟机栈作用类似。区别是，Java虚拟机栈为虚拟机执行Java方法(字节码)服务，本地方法栈则为虚拟机使用到的Native方法服务。本地方法栈也会抛出StackOverflow、OutOfMemory异常 1.4 Java堆几乎所有的对象都在这里分配内存，是垃圾收集的主要区域(“GC堆”)现代的垃圾收集器基本上都采用分代收集算法，其主要的思想是针对不同类型的对象采取不同的垃圾回收算法，可以将堆分成两块 新生代(Young Gerneration) 老年代(Old Gerneration) 堆不需要连续内存，只要是逻辑上连续即可，并且可以动态增加内存大小（通过-Xmx和-Xms控制）1java -Xmx512M -Xms1024M HackTheJava // 第一个参数设置堆内存的初始值，第二个设置最大值 如果在堆中没有内存完成对象的内存分配，且无法再扩展堆内存时，将会抛出OutOfMemory异常 1.5 方法区方法区(Method Area)与Java堆一样，是线程共享的区域，它用于存储已被虚拟机加载的类信息，常亮，静态变量，即时编译器编译后的代码等数据。不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。 对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。 HotSpot虚拟机把它当成永久代来进行垃圾回收。但是很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。 1.6 运行时常量池方法区的一部分，用于存放用于存放编译器生成的各种字面量和符号引用，这部分将在类加载后进入方法区的运行时常量池中存放。 1.7 直接内存在 JDK 1.4 中新加入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存（Native 堆），然后通过一个存储在 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。 这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。 12]]></content>
      <categories>
        <category>Java虚拟机</category>
      </categories>
      <tags>
        <tag>Java内存区域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis]]></title>
    <url>%2F2018%2F11%2F27%2FRedis%2F</url>
    <content type="text"><![CDATA[1 redis介绍1.1 什么是NoSQLNoSQL，泛指非关系型数据库，即Not-Only SQL，它可以作为关系型数据库的良好补充。随着互联网web2.0网站的兴起，非关系型的数据库现在成了一个极其热门的新领域，非关系数据库产品的发展非常迅速。 而传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，例如： High performance：对数据库高并发读写的需求web2.0网站要根据用户个性化信息来实时生成动态页面和提供动态信息，所以基本上无法使用动态页面静态化技术，因此数据库并发负载非常高，往往要达到每秒上万次读写请求。关系数据库应付上万次SQL查询还勉强顶得住，但是应付上万次SQL写数据请求，硬盘IO就已经无法承受了。其实对于普通的BBS网站，往往也存在对高并发写请求的需求，例如网站的实时统计在线用户状态，记录热门帖子的点击次数，投票计数等，因此这是一个相当普遍的需求。 Huge Storage：对海量数据的高效率存储和访问的需求类似Facebook，twitter，Friendfeed这样的SNS网站，每天用户产生海量的用户动态，以Friendfeed为例，一个月就达到了2.5亿条用户动态，对于关系数据库来说，在一张2.5亿条记录的表里面进行SQL查询，效率是极其低下乃至不可忍受的。再例如大型web网站的用户登录系统，例如腾讯，盛大，动辄数以亿计的帐号，关系数据库也很难应付。3、High Scalability &amp;&amp; High Availability- 对数据库的高可扩展性和高可用性的需求在基于web的架构当中，数据库是最难进行横向扩展的，当一个应用系统的用户量和访问量与日俱增的时候，你的数据库却没有办法像web server和app server那样简单的通过添加更多的硬件和服务节点来扩展性能和负载能力。对于很多需要提供24小时不间断服务的网站来说，对数据库系统进行升级和扩展是非常痛苦的事情，往往需要停机维护和数据迁移，为什么数据库不能通过不断的添加服务器节点来实现扩展呢？ NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。 1.2 什么是redisredis是用C语言开发的一个开源的高性能键值对(key-value)数据库。它通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止redis支持的键值数据类型如下：字符串类型、散列类型、列表类型、集合类型、有序集合类型。 1.3 redis的应用场景 缓存（数据查询、短连接、新闻内容、商品内容等等）。（最多使用） 分布式集群架构中的session分离。 聊天室的在线好友列表。 任务队列。（秒杀、抢购、12306等等） 应用排行榜。 网站访问统计。 数据过期处理（可以精确到毫秒） 2 测试环境redis需要安装在linux服务器上运行测试，本教程使用 linux虚拟机及xshell客户端进行功能测试。 3 安装运行redis3.1 redis安装环境redis是C语言开发，建议在linux上运行，本教程使用Centos7作为安装环境。安装redis需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装 gcc：yum install gcc-c++ 3.2 redis安装 版本说明：笔者使用的是redis3.0版本 源码下载：从redis官网,并将文件拷贝至/home/user/local/redis/下 解压源码：tar -zxvf redis-3.0.7.tar.gz首先将windows下的redis-3.0.7.tar.gz通过xshell拷贝到虚拟机/home根目录下，直接将文件拖拽至xshell输入框即可接下来在local/下新建redis/文件夹，再将redis-3.0.7.tar.gz拷贝至redis文件夹下，再进行解压然后将redis安装到指定文件夹bin下面，如果没有自己用mkdir新建就行。再将redis-3.0.7文件夹下面的redis.conf拷贝到安装bin/目录下，并且查看当前目录下的文件权限 3.3 redis启动3.3.1 前端模式启动直接在bin目录底下输入命令1./redis-server 即可将redis在前端运行，但是此方法一旦关闭xshell窗口，则断开连接。 3.3.2 后端模式启动修改redis.conf文件1用vi redis.conf命令，将daemonize no修改成daemonize yes。按i进行编辑，esc保存，:wq退出修改 启动之后，另外打开一个xshell连接当前虚拟机，在bin/目录下使用12./redis-cli连接redis用 set key1 1 向redis存入数据，并且使用 get key1 读取出数据 使用后端启动的方式在关闭启动窗口之后仍然能够读取redis中的数据 3.4 redis停止强行终止Redis进程可能会导致redis持久化数据丢失。正确停止Redis的方式应该是向Redis发送SHUTDOWN命令，方法为：1redis-cli shutdown,关闭之后，当再次访问时被拒绝 4 Jedis4.1 Jedis介绍Redis不仅是使用命令来操作，现在基本上主流的语言都有客户端支持，比如java、C、C#、C++、php、Node.js、Go等。在官方网站里列一些Java的客户端，有Jedis、Redisson、Jredis、JDBC-Redis、等其中官方推荐使用Jedis和Redisson。 在企业中用的最多的就是Jedis，Jedis同样也是托管在github上，地址：https://github.com/xetorthio/jedis 4.3 通过Jedis连接redis单机通过创建单实例Jedis对象连接redis服务，代码如下1234567891011@Test public void jedisTest1()&#123; // 创建和redis的连接 Jedis jedis = new Jedis("192.168.93.200",6379); // 存入 jedis.set("key2","2"); // 取出 System.out.println(jedis.get("key2")); // 关闭jedis jedis.close(); &#125; 4.2.1 连接超时解决由于linux防火墙默认开启，redis的服务端口6379并不在开放规则之内，所有需要将此端口开放访问或者关闭防火墙。关闭防火墙命令：systemctl stop firewalld.service如果是修改防火墙规则，可以修改：/etc/sysconfig/iptables文件 4.2.2 使用连接池连接通过单实例连接redis不能对redis连接进行共享，可以使用连接池对redis连接进行共享，提高资源利用率，使用jedisPool连接redis服务，如下代码：12345678910111213@Test public void jedisPoolTest()&#123; // 创建连接池 JedisPool jedisPool = new JedisPool("192.168.93.200",6379); // 从连接池中获取连接 Jedis jedis = jedisPool.getResource(); // 存入数据 jedis.set("key3","3"); // 取出 System.out.println(jedis.get("key3")); // 一定要关闭，关闭连接之后会自动回到连接池给别人使用，如果一直不关闭会死机 jedis.close(); &#125; 4.2.3 Jedis与Spring整合配置Spring配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "&gt; &lt;!--连接池配置--&gt; &lt;bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"&gt; &lt;!--最大连接数--&gt; &lt;property name="maxTotal" value="30"/&gt; &lt;!--最大空闲连接数--&gt; &lt;property name="maxIdle" value="10"/&gt; &lt;!--每次释放连接的最大数--&gt; &lt;property name="numTestsPerEvictionRun" value="1024"/&gt; &lt;!--释放连接扫描间隔（毫秒）--&gt; &lt;property name="minEvictableIdleTimeMillis" value="1800000"/&gt; &lt;!--连接空闲后多久释放，当空闲时间&gt;该值且空闲连接&gt;最大空闲连接数时，直接释放--&gt; &lt;property name="softMinEvictableIdleTimeMillis" value="10000"/&gt; &lt;!--获取连接时的最大等待毫秒数，小于零：阻塞不确定的时间，默认-1--&gt; &lt;property name="maxWaitMillis" value="1500"/&gt; &lt;!--在获取连接的时候检查有效性，默认false--&gt; &lt;property name="testOnBorrow" value="false"/&gt; &lt;!--在空闲时检查有效性，默认false--&gt; &lt;property name="testWhileIdle" value="true"/&gt; &lt;!--连接耗尽时是否阻塞，false报异常，true阻塞直到超时，默认true--&gt; &lt;property name="blockWhenExhausted" value="false"/&gt; &lt;/bean&gt; &lt;!--redis单机，通过连接池--&gt; &lt;bean id="jedisPoll" class="redis.clients.jedis.JedisPool" destroy-method="close"&gt; &lt;constructor-arg name="poolConfig" ref="jedisPoolConfig"/&gt; &lt;constructor-arg name="host" value="192.168.93.200"/&gt; &lt;constructor-arg name="port" value="6379"/&gt; &lt;/bean&gt;&lt;/beans&gt; 测试代码：12345678910111213private ApplicationContext applicationContext; @Before public void setUp()&#123; applicationContext = new ClassPathXmlApplicationContext("classpath:ApplicationContext.xml"); &#125; @Test public void jedisSpringTest()&#123; JedisPool jedisPool = (JedisPool) applicationContext.getBean("jedisPoll"); Jedis jedis = jedisPool.getResource(); jedis.set("name","minhe"); System.out.println(jedis.get("name")); //jedis.close(); &#125; 5 持久化Redis的高性能是由于其将所有数据都存储在了内存中，为了使Redis在重启之后仍能保证数据不丢失，需要将数据从内存中同步到硬盘中，这一过程就是持久化。Redis支持两种方式的持久化，一种是RDB方式，一种是AOF方式。可以单独使用其中一种或将二者结合使用。 5.1 RDB持久化RDB方式的持久化是通过快照(snapshotting)完成的，当符合一定条件时redis会自动将内存中的数据进行快照并持久化到硬盘。RDB是redis默认采用的持久化方式，在redis.conf配置文件中有默认如下配置：123save 900 1save 300 10save 60 10000 save 开头的一行就是持久化配置，可以配置多个条件（每行配置一个条件），每个条件之间是“或”的关系，“save 900 1”表示15分钟（900秒钟）内至少1个键被更改则进行快照，“save 300 10”表示5分钟（300秒）内至少10个键被更改则进行快照。 在redis.conf中：配置dir指定RDB快照文件的位置；配置dbfilename指定RDB快照文件的名称。redis在启动后会自动读取RDB快照文件，将数据从硬盘载入到内存中 。根据数据量大小与结构和服务器的性能不同，时间也不相同。问题总结：RDB方式实现持久化，一旦redis异常退出之后，就会丢失最后一次快照以后更改的所有数据。 5.2 AOF持久化默认情况下Redis没有开启AOF（append only file）方式的持久化，可以通过appendonly参数开启：1appendonly yes 开启AOF持久化后每执行一条会更改Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件。AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的，默认的文件名是appendonly.aof，可以通过appendfilename参数修改：appendfilename appendonly.aof 6 主从复制持久化保证了即使redis服务重启也不会丢失数据，因为redis服务重启后会将硬盘上持久化的数据恢复到内存中，但是当redis服务器的硬盘损坏了可能会导致数据丢失，如果通过redis的主从复制机制就可以避免这种单点故障，如下图：说明： 主redis中的数据有2个副本(replication)即从redis1和从redis2，即使一台redis服务器宕机，其它两台redis服务器也可以继续提供服务。 主redis中的数据和从redis上的数据保持实时同步，当主redis写入数据时通过主从复制机制会复制到两个从redis服务器上面。 只有一个主redis服务器，可以有多个从redis服务器。 主从复制不会阻塞master，在同步数据时，master可以继续处理client请求。 一个redis服务器，既可以是master，也可以是slave。 6.1 从redis配置在redis文件夹下新建一个slave文件夹，用来放bin/目录下的所有文件，模拟2台redis服务器。修改slave中的redis.conf，将端口号修改成63801234cd /home/user/local/redis/mkdir slave/cd /home/user/local/redis/cp bin/* /home/user/local/redis/slave/ 修改redis服务器上的redis.conf文件，添加1slaveof 192.168.93.201 6380 6.1.1 主从复制的过程在redis2.8版本之前的主从复制如下图复制过程说明： slave启动，slave会建立起与master的链接，发送sync命令。 master启动后一个后台进程将数据库快照保存到RDB文件中（注意：此时如果生成RDB文件过程中存在写数据操作会导致RDB文件和当前redis数据不一致，所以此时master主进程会开始收集写命令并缓存起来）。 master发送RDB文件给slave slave将文件保存到磁盘上，然后加载到内存中恢复 master将缓存的命令转发给slave。（注意：后续master收到的写命令都会通过开始建立连接发送给salve。当master和slave的链接断开时，slave可以自动连接。如果master同时收到多个slave发送来的同步连接命令，只会启动一个进程来写数据库镜像，然后发送给所有的slave。） 一旦主redis宕机，从redis服务器只提供读服务。 在模拟主从复制的时候，必须先启动master再启动slave，当两个全部启动完成之后，如下图接下来可以用get语句来查看之前存进去的key1的值，注意，默认启动的是master，启动slave则要加上对应的端口号1234567./redis-server redis.config./redis-cliget key1./redis-cli shutdown./redis-cli -p 6380get key1 如图所示，当在slave上面set key2的时候提示slave是只读模式。 本文作者：MinheZ 版权声明：转载请注明出处！]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lucene&solr]]></title>
    <url>%2F2018%2F11%2F22%2Flucene-solr%2F</url>
    <content type="text"><![CDATA[1 需求分析在一些大型门户网站、电子商务网站等都需要站内搜索功能，使用传统的数据库查询方式实现搜索无法满足一些高级的搜索需求，比如：搜索速度要快、搜索结果按相关度排序、搜索内容格式不固定等，这里就需要使用全文检索技术实现搜索功能。 1.1 实现方法1.1.1 使用Lucene实现单独使用Lucene实现站内搜索需要开发的工作量较大，主要表现在：索引维护、索引性能优化、搜索性能优化等，因此不建议采用。 1.1.2 使用solr实现基于Solr实现站内搜索扩展性较好并且可以减少程序员的工作量，因为Solr提供了较为完备的搜索引擎解决方案，因此在门户、论坛等系统中常用此方案。 1.2 什么是solrSolr 是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。Solr可以独立运行，运行在Jetty、Tomcat等这些Servlet容器中，Solr 索引的实现方法很简单，用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr根据xml文档添加、删除、更新索引 。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回Xml、json等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。 Solr与Lucene的区别Lucene是一个开放源代码的全文检索引擎工具包，它不是一个完整的全文检索引擎，Lucene提供了完整的查询引擎和索引引擎，目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者以Lucene为基础构建全文检索引擎。 Solr的目标是打造一款企业级的搜索引擎系统，它是一个搜索引擎服务，可以独立运行，通过Solr可以非常快速的构建企业的搜索引擎，通过Solr也可以高效的完成站内搜索功能。 2 solr安装及配置2.1 solr的下载从Solr官方网站下载Solr4.10.3，根据Solr的运行环境，Linux下需要下载lucene-4.10.3.tgz，windows下需要下载lucene-4.10.3.zip。Solr使用指南可参考 2.2 solr的文件结构下载的Solr4.10.3.zip解压之后如下图 123456789101112bin：solr的运行脚本contrib：solr的一些贡献软件/插件，用于增强solr的功能。dist：该目录包含build过程中产生的war和jar文件，以及相关的依赖文件。docs：solr的API文档example：solr工程的例子目录：-- example/solr： 该目录是一个包含了默认配置信息的Solr的Core目录。-- example/multicore： 该目录包含了在Solr的multicore中设置的多个Core目录。 -- example/webapps： 该目录中包括一个solr.war，该war可作为solr的运行实例工程。licenses：solr相关的一些许可信息 2.3 solr的运行环境solr 需要运行在一个Servlet容器中，Solr4.10.3要求jdk使用1.7以上，Solr默认提供Jetty（java写的Servlet容器），本教程使用Tocmat作为Servlet容器，环境如下： Solr：Solr4.10.3Jdk：jdk1.8Tomcat：apache-tomcat-9.0.12 2.4 solr整合Tomcat2.4.1 solrHome与solrCore创建一个Solr home目录，SolrHome是Solr运行的主目录，目录中包括了运行Solr实例所有的配置文件和数据文件，Solr实例就是SolrCore，一个SolrHome可以包括多个SolrCore（Solr实例），每个SolrCore提供单独的搜索和索引服务。example\solr是一个solr home目录结构，如下：上图中“collection1”是一个SolrCore（Solr实例）目录 ，目录内容如下所示：123456说明：collection1：叫做一个Solr运行实例SolrCore，SolrCore名称不固定，一个solr运行实例对外单独提供索引和搜索接口。solrHome中可以创建多个solr运行实例SolrCore。一个solr的运行实例对应一个索引目录。conf是SolrCore的配置文件目录 。data目录存放索引文件需要创建 2.4.2 整合步骤第一步：安装tomcat。F:\Server\apache-tomcat-9.0.12第二步：把solr的war包复制到tomcat 的webapp目录下。把\solr-4.10.3\dist\solr-4.10.3.war复制到F:\Server\apache-tomcat-9.0.12\webapps下。改名为solr.war第三步：solr.war解压。使用压缩工具解压或者启动tomcat自动解压。解压之后删除solr.war第四步：把\solr-4.10.3\example\lib\ext目录下的所有的jar包添加到solr工程中第五步：配置solrHome和solrCore。1）创建一个solrhome（存放solr所有配置文件的一个文件夹）。\solr-4.10.3\example\solr目录就是一个标准的solrhome。2）把\solr-4.10.3\example\solr文件夹复制到F:\Server路径下，改名为solrhome，改名不是必须的，是为了便于理解。3）在solrhome下有一个文件夹叫做collection1这就是一个solrcore。就是一个solr的实例。一个solrcore相当于mysql中一个数据库。Solrcore之间是相互隔离。第六步：告诉solr服务器配置文件也就是solrHome的位置。修改web.xml使用jndi的方式告诉solr服务器。第七步：启动tomcat第八步：访问http://localhost:8080/solr/ 2.5 配置中文分词器2.5.1 Schema.xmlschema.xml，在SolrCore的conf目录下，它是Solr数据表配置文件，它定义了加入索引的数据的数据类型的。主要包括FieldTypes、Fields和其他的一些缺省设置。 2.5.2 域的分类普通域：String，Long等。例如：动态域：起到模糊匹配的效果，可以模糊匹配没有定义的域名。例如：主键域： id一般就使用这个，不需要修改或者添加复制域：用于查询的时候从多个域进行查询，可以将多个域复制到某一个统一域中，然后搜索的时候可以直接从这个统一的域中查询，相当于从多个域中查询。例如： 2.5.3 安装中文分词器使用IKAnalyzer中文分析器。 第一步：把IKAnalyzer2012FF_u1.jar添加到solr/WEB-INF/lib目录下。第二步：复制IKAnalyzer的配置文件和自定义词典和停用词词典到solr的classpath下。也就是在apache-tomcat-9.0.12\webapps\solr\WEB-INF目录下新建classes目录,将配置文件和词典放进去.第三步：在schema.xml中添加一个自定义的fieldType，使用中文分析器。1234&lt;!-- IKAnalyzer--&gt; &lt;fieldType name="text_ik" class="solr.TextField"&gt; &lt;analyzer class="org.wltea.analyzer.lucene.IKAnalyzer"/&gt; &lt;/fieldType&gt; 第四步：定义field，指定field的type属性为text_ik123&lt;!--IKAnalyzer Field--&gt; &lt;field name="title_ik" type="text_ik" indexed="true" stored="true" /&gt; &lt;field name="content_ik" type="text_ik" indexed="true" stored="false" multiValued="true"/&gt; 第四步：重启tomcat测试： 3 管理索引库3.1 维护索引3.1.1 添加/更新文档添加单个文档 批量导入数据使用dataimport插件批量导入数据。第一步：把dataimport插件依赖的jar包添加到solrcore（collection1\lib）中，还需要mysql的数据库驱动。第二步：配置solrconfig.mxl文件，添加一个requestHandler。123456&lt;requestHandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler"&gt; &lt;lst name="defaults"&gt; &lt;str name="config"&gt;data-config.xml&lt;/str&gt; &lt;/lst&gt; &lt;/requestHandler&gt; 第三步：创建一个data-config.xml，保存到collection1\conf\目录下123456789101112131415161718&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;dataConfig&gt; &lt;dataSource type="JdbcDataSource" driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:3306/lucene" user="root" password="root"/&gt; &lt;document&gt; &lt;entity name="product" query="SELECT pid,name,catalog_name,price,description,picture FROM products "&gt; &lt;field column="pid" name="id"/&gt; &lt;field column="name" name="product_name"/&gt; &lt;field column="catalog_name" name="product_catalog_name"/&gt; &lt;field column="price" name="product_price"/&gt; &lt;field column="description" name="product_description"/&gt; &lt;field column="picture" name="product_picture"/&gt; &lt;/entity&gt; &lt;/document&gt; &lt;/dataConfig&gt; 第四步：重启tomcat，如图所示第五步：点击“execute”按钮导入数据，导入数据前会先清空索引库，然后再导入。 3.1.2 删除文档删除索引格式如下：123456789101112131） 删除制定ID的索引 &lt;delete&gt; &lt;id&gt;8&lt;/id&gt;&lt;/delete&gt;2） 删除查询到的索引数据 &lt;delete&gt; &lt;query&gt;product_catalog_name:幽默杂货&lt;/query&gt;&lt;/delete&gt;3） 删除所有索引数据 &lt;delete&gt; &lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt; 3.2 查询索引通过/select搜索索引，Solr制定一些参数完成不同需求的搜索： q - 查询字符串，必须的，如果查询所有使用:。 fq - （filter query）过虑查询，作用：在q查询符合结果中同时是fq查询符合的，例如：过滤查询价格从1到20的记录。也可以在“q”查询条件中使用product_price:[1 TO 20]。也可以使用“”表示无限，例如：20以上：product_price:[20 TO ]20以下：product_price:[* TO 20] sort - 排序，格式：sort=+&lt;desc|asc&gt;[,+&lt;desc|asc&gt;]… 。示例：product_price desc，按价格降序 hl 是否高亮 ,设置高亮Field，设置格式前缀和后缀。例如： 123hl.fl:profuct_name hl.simple.pre:&lt;span color='red'&gt;hl.simple.post&lt;/span&gt; 4 使用SolrJ管理索引库4.1 什么是SolrJsolrj是访问Solr服务的java客户端，提供索引和搜索的请求方法，SolrJ通常在嵌入在业务系统中，通过SolrJ的API接口操作Solr服务，如下图： 4.2 依赖的jar包包括solrJ的jar包。还需要solr-4.10.3/example/lib/ext下的jar包 4.3 添加文档第一步：和Solr服务器建立连接。HttpSolrServer对象建立连接。第二步：创建一个SolrInputDocument对象，然后添加域。第三步：将SolrInputDocument添加到索引库。第四步：提交。1234567891011// 创建solr文档对象SolrInputDocument document = new SolrInputDocument();// 域要先定义后使用，注意必须要有id主域// solr中没有专用的修改方法，会自动根据id进行查找，如果找到了则删除原来的，将新来的加入，如果没找到就直接增加document.addField("id","a001");document.addField("product_name","台灯");document.addField("product_price",149.9);// 将文档加入solr域中solrServer.add(document);// 提交solrServer.commit(); 4.4 删除文档根据ID删除文档的代码很简单123456// 根据主键ID进行删除solrServer.deleteById("a001");// 删除所有solrServer.deleteByQuery("*:*");// 提交solrServer.commit(); 4.5 修改文档在solrJ中修改没有对应的update方法，只有add方法，只需要添加一条新的文档，和被修改的文档id一致就，可以修改了。本质上就是先删除后添加。 4.6 查询文档4.6.1 简单查询根据索引查询123456789101112131415161718// 链接solr服务器 private SolrServer solrServer = new HttpSolrServer("http://localhost:8080/solr");// 创建solr查询对象SolrQuery solrQuery = new SolrQuery();// 查询所有solrQuery.setQuery("*:*");// 查询，并获取查询的响应QueryResponse queryResponse = solrServer.query(solrQuery);// 从查询的响应中获取结果集对象SolrDocumentList documentList = queryResponse.getResults();// 打印一共产生多少条记录System.out.println("=========count=======" + documentList.getNumFound());for (SolrDocument documents : documentList)&#123; System.out.println("============" + documents.get("id")); System.out.println("============" + documents.get("product_name")); System.out.println("============" + documents.get("product_price")); System.out.println("=========这是分割线============="); &#125; 4.6.1 复杂查询其中包含查询、过滤、分页、排序、高亮显示等处理。1234567891011121314151617181920212223242526272829303132333435363738394041424344// 链接solr服务器 private SolrServer solrServer = new HttpSolrServer("http://localhost:8080/solr"); SolrQuery solrQuery = new SolrQuery(); //根据条件查询 solrQuery.setQuery("台灯"); // 设置默认搜索域 solrQuery.set("df","product_keywords"); // 设置过滤器 solrQuery.addFilterQuery("product_price : [1 TO 100]"); // 设置排序 solrQuery.setSort("product_price", SolrQuery.ORDER.desc); // 设置分页 solrQuery.setStart(0); // 设置查询多少条 solrQuery.setRows(50); // 设置高亮显示 // 高亮显示默认是关闭的 solrQuery.setHighlight(true); // 设置高亮显示的区域 solrQuery.addHighlightField("product_name"); // 设置高亮显示的前缀 solrQuery.setHighlightSimplePre("&lt;span style=\"color:red\"&gt;"); // 设置高亮显示的后缀 solrQuery.setHighlightSimplePost("&lt;/span&gt;"); // 查询并获取查询响应 QueryResponse queryResponse = solrServer.query(solrQuery); // 将响应放入查询结果集 SolrDocumentList documentList = queryResponse.getResults(); // 显示出查询到多少条信息 System.out.println("==========count======= " + documentList.getNumFound()); for (SolrDocument document : documentList)&#123; Map&lt;String, Map&lt;String,List&lt;String&gt;&gt;&gt; highlighting = queryResponse.getHighlighting(); List&lt;String&gt; list = highlighting.get(document.get("id")).get("product_name"); if (list != null &amp; list.size() &gt; 0) System.out.println("======high ligthing========" + list.get(0)); System.out.println(document.get("id")); System.out.println(document.get("product_name")); System.out.println(document.get("product_price")); System.out.println("============分割线==========="); &#125;&#125; 本文作者：MinheZ 版权声明：转载请注明出处！]]></content>
      <categories>
        <category>全文检索</category>
        <category>lucene&amp;solr</category>
      </categories>
      <tags>
        <tag>全文检索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将本地项目推送到github]]></title>
    <url>%2F2018%2F11%2F20%2F%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0github%2F</url>
    <content type="text"><![CDATA[写在前面本篇文章将介绍怎么用git bash将自己本地项目推送至github仓库，仅此记录自学过程，如有不正确的地方，欢迎指正，探讨！ 1 软件安装此部分为git客户端的安装，详细教程可以参考笔者另一篇文章Create-your-blog-on-GitHub 2 推送教程首先在你本地要上传的项目文件夹上按住shift+鼠标右键，点击git bash here，这就就能直接进入当前目录下操作，如下图 然后输入git init，使当前目录成为本地git仓库，完成此步之后，在当前目录下会有一个隐藏文件夹.git 先输入git pull -f –all 将远程的代码仓下拉至本地，再输入git add . 把本地项目里面的所有文件添加到刚生成的本地git仓库 输入 git commit -m “这里是注释，自己随便写点什么” 输入git remote add origin https://github.com/MinheZ/SSM.git 后面链接是你远程github端的仓库链接，再进行这一步的时候可能会出现下图错误 可以使用git push -u origin master -f将本地仓强制推上远程仓，但是要注意提前把github仓里面的文件下拉至本地备份，否则可能出现文件丢失。 本文作者：MinheZ 版权声明：转载请注明出处！]]></content>
      <categories>
        <category>github项目推送</category>
      </categories>
      <tags>
        <tag>使用教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架搭建]]></title>
    <url>%2F2018%2F11%2F20%2FSSM%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[1 写在前面初学SSM(SpringMVC,Spring,MyBatis)框架的整合，并在整合后的框架上对数据库进行增删改查等操作，仅此记录自学过程，如有不正确的地方，欢迎指正，探讨！本文工程代码以及相关jar包在文末给出。 2 SSM是干什么的在搭建整体架构之前，我们必须清楚SSM框架各个部分的作用是什么。 SpringMVC这是一个表现层的框架，SpringMVC在项目中拦截用户请求，它的核心Servlet即DispatcherServlet（前端控制器）承担中介或是前台这样的职责，将用户请求通过HandlerMapping（处理器映射器）去匹配Controller（控制器），Controller就是具体对应请求所执行的操作。简而言之，SpringMVC的作用就是从请求中接收传入的参数，将处理后的结果数据返回给页面展示，SpringMVC相当于SSH框架中struts。 SpringSpring就像是整个项目中装配bean的大工厂，在配置文件中可以指定使用特定的参数去调用实体类的构造方法来实例化对象。Spring的核心思想是IoC（控制反转），即不再需要程序员去显式地new一个对象，而是让Spring框架帮你来完成这一切。 MyBatismybatis是对jdbc的封装，它让数据库底层操作变的透明。mybatis的操作都是围绕一个sqlSessionFactory实例展开的。mybatis通过配置文件关联到各实体类的Mapper文件，Mapper文件中配置了每个类对数据库所需进行的sql语句映射。在每次与数据库交互时，通过sqlSessionFactory拿到一个sqlSession，再执行sql命令。 页面发送请求给控制器，控制器调用业务层处理逻辑，逻辑层向持久层发送请求，持久层与数据库交互，后将结果返回给业务层，业务层将处理逻辑发送给控制器，控制器再调用视图展现数据。 3 整合思路3.1 数据库首先要做的是新建一个数据库CRM，并创建如下表单base_dict（这部分比较枯燥，可以粗略带过=。=）12345678910111213141516171819CREATE DATABASE CRM_practice;USE CRM_practice;SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for base_dict-- ----------------------------DROP TABLE IF EXISTS `base_dict`;CREATE TABLE `base_dict` ( `dict_id` VARCHAR(32) NOT NULL COMMENT '数据字典id(主键)', `dict_type_code` VARCHAR(10) NOT NULL COMMENT '数据字典类别代码', `dict_type_name` VARCHAR(64) NOT NULL COMMENT '数据字典类别名称', `dict_item_name` VARCHAR(64) NOT NULL COMMENT '数据字典项目名称', `dict_item_code` VARCHAR(10) DEFAULT NULL COMMENT '数据字典项目代码(可为空)', `dict_sort` INT(10) DEFAULT NULL COMMENT '排序字段', `dict_enable` CHAR(1) NOT NULL COMMENT '1:使用 0:停用', `dict_memo` VARCHAR(64) DEFAULT NULL COMMENT '备注', PRIMARY KEY (`dict_id`)) ENGINE=INNODB DEFAULT CHARSET=utf8; 给base_dict表单添加数据12345678910111213141516171819202122232425262728293031323334-- ------------------------------ Records of base_dict-- ----------------------------INSERT INTO `base_dict` VALUES ('1', '001', '客户行业', '教育培训 ', NULL, '1', '1', NULL);INSERT INTO `base_dict` VALUES ('10', '003', '公司性质', '民企', NULL, '3', '1', NULL);INSERT INTO `base_dict` VALUES ('12', '004', '年营业额', '1-10万', NULL, '1', '1', NULL);INSERT INTO `base_dict` VALUES ('13', '004', '年营业额', '10-20万', NULL, '2', '1', NULL);INSERT INTO `base_dict` VALUES ('14', '004', '年营业额', '20-50万', NULL, '3', '1', NULL);INSERT INTO `base_dict` VALUES ('15', '004', '年营业额', '50-100万', NULL, '4', '1', NULL);INSERT INTO `base_dict` VALUES ('16', '004', '年营业额', '100-500万', NULL, '5', '1', NULL);INSERT INTO `base_dict` VALUES ('17', '004', '年营业额', '500-1000万', NULL, '6', '1', NULL);INSERT INTO `base_dict` VALUES ('18', '005', '客户状态', '基础客户', NULL, '1', '1', NULL);INSERT INTO `base_dict` VALUES ('19', '005', '客户状态', '潜在客户', NULL, '2', '1', NULL);INSERT INTO `base_dict` VALUES ('2', '001', '客户行业', '电子商务', NULL, '2', '1', NULL);INSERT INTO `base_dict` VALUES ('20', '005', '客户状态', '成功客户', NULL, '3', '1', NULL);INSERT INTO `base_dict` VALUES ('21', '005', '客户状态', '无效客户', NULL, '4', '1', NULL);INSERT INTO `base_dict` VALUES ('22', '006', '客户级别', '普通客户', NULL, '1', '1', NULL);INSERT INTO `base_dict` VALUES ('23', '006', '客户级别', 'VIP客户', NULL, '2', '1', NULL);INSERT INTO `base_dict` VALUES ('24', '007', '商机状态', '意向客户', NULL, '1', '1', NULL);INSERT INTO `base_dict` VALUES ('25', '007', '商机状态', '初步沟通', NULL, '2', '1', NULL);INSERT INTO `base_dict` VALUES ('26', '007', '商机状态', '深度沟通', NULL, '3', '1', NULL);INSERT INTO `base_dict` VALUES ('27', '007', '商机状态', '签订合同', NULL, '4', '1', NULL);INSERT INTO `base_dict` VALUES ('3', '001', '客户行业', '对外贸易', NULL, '3', '1', NULL);INSERT INTO `base_dict` VALUES ('30', '008', '商机类型', '新业务', NULL, '1', '1', NULL);INSERT INTO `base_dict` VALUES ('31', '008', '商机类型', '现有业务', NULL, '2', '1', NULL);INSERT INTO `base_dict` VALUES ('32', '009', '商机来源', '电话营销', NULL, '1', '1', NULL);INSERT INTO `base_dict` VALUES ('33', '009', '商机来源', '网络营销', NULL, '2', '1', NULL);INSERT INTO `base_dict` VALUES ('34', '009', '商机来源', '推广活动', NULL, '3', '1', NULL);INSERT INTO `base_dict` VALUES ('4', '001', '客户行业', '酒店旅游', NULL, '4', '1', NULL);INSERT INTO `base_dict` VALUES ('5', '001', '客户行业', '房地产', NULL, '5', '1', NULL);INSERT INTO `base_dict` VALUES ('6', '002', '客户信息来源', '电话营销', NULL, '1', '1', NULL);INSERT INTO `base_dict` VALUES ('7', '002', '客户信息来源', '网络营销', NULL, '2', '1', NULL);INSERT INTO `base_dict` VALUES ('8', '003', '公司性质', '合资', NULL, '1', '1', NULL);INSERT INTO `base_dict` VALUES ('9', '003', '公司性质', '国企', NULL, '2', '1', NULL); 创建customer表单12345678910111213141516171819202122DROP TABLE IF EXISTS `customer`;CREATE TABLE `customer` ( `cust_id` BIGINT(32) NOT NULL AUTO_INCREMENT COMMENT '客户编号(主键)', `cust_name` VARCHAR(32) NOT NULL COMMENT '客户名称(公司名称)', `cust_user_id` BIGINT(32) DEFAULT NULL COMMENT '负责人id', `cust_create_id` BIGINT(32) DEFAULT NULL COMMENT '创建人id', `cust_source` VARCHAR(32) DEFAULT NULL COMMENT '客户信息来源', `cust_industry` VARCHAR(32) DEFAULT NULL COMMENT '客户所属行业', `cust_level` VARCHAR(32) DEFAULT NULL COMMENT '客户级别', `cust_linkman` VARCHAR(64) DEFAULT NULL COMMENT '联系人', `cust_phone` VARCHAR(64) DEFAULT NULL COMMENT '固定电话', `cust_mobile` VARCHAR(16) DEFAULT NULL COMMENT '移动电话', `cust_zipcode` VARCHAR(10) DEFAULT NULL, `cust_address` VARCHAR(100) DEFAULT NULL, `cust_createtime` DATETIME DEFAULT NULL COMMENT '创建时间', PRIMARY KEY (`cust_id`), KEY `FK_cst_customer_source` (`cust_source`), KEY `FK_cst_customer_industry` (`cust_industry`), KEY `FK_cst_customer_level` (`cust_level`), KEY `FK_cst_customer_user_id` (`cust_user_id`), KEY `FK_cst_customer_create_id` (`cust_create_id`)) ENGINE=INNODB AUTO_INCREMENT=162 DEFAULT CHARSET=utf8; 给customer表单添加数据 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159INSERT INTO `customer` VALUES ('14', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:01'); INSERT INTO `customer` VALUES ('15', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:01'); INSERT INTO `customer` VALUES ('16', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:01'); INSERT INTO `customer` VALUES ('17', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:02'); INSERT INTO `customer` VALUES ('22', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:03'); INSERT INTO `customer` VALUES ('24', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:03'); INSERT INTO `customer` VALUES ('25', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:03'); INSERT INTO `customer` VALUES ('26', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:03'); INSERT INTO `customer` VALUES ('28', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:04'); INSERT INTO `customer` VALUES ('29', '令狐冲', NULL, NULL, '7', '1', '23', '任盈盈', '0108888886', '13888888886', '6123456', '电子科技大学6', '2016-04-08 16:32:04'); INSERT INTO `customer` VALUES ('30', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:04'); INSERT INTO `customer` VALUES ('31', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:04'); INSERT INTO `customer` VALUES ('33', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:04'); INSERT INTO `customer` VALUES ('34', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:05'); INSERT INTO `customer` VALUES ('35', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:05'); INSERT INTO `customer` VALUES ('36', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:05'); INSERT INTO `customer` VALUES ('37', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:05'); INSERT INTO `customer` VALUES ('38', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:05'); INSERT INTO `customer` VALUES ('39', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:06'); INSERT INTO `customer` VALUES ('40', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:06'); INSERT INTO `customer` VALUES ('41', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:06'); INSERT INTO `customer` VALUES ('42', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:06'); INSERT INTO `customer` VALUES ('43', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:06'); INSERT INTO `customer` VALUES ('44', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:07'); INSERT INTO `customer` VALUES ('45', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:07'); INSERT INTO `customer` VALUES ('46', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:07'); INSERT INTO `customer` VALUES ('47', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:07'); INSERT INTO `customer` VALUES ('48', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:07'); INSERT INTO `customer` VALUES ('49', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:07'); INSERT INTO `customer` VALUES ('50', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:08'); INSERT INTO `customer` VALUES ('51', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:08'); INSERT INTO `customer` VALUES ('52', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:08'); INSERT INTO `customer` VALUES ('53', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:08'); INSERT INTO `customer` VALUES ('54', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:08'); INSERT INTO `customer` VALUES ('55', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:08'); INSERT INTO `customer` VALUES ('56', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:09'); INSERT INTO `customer` VALUES ('57', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:09'); INSERT INTO `customer` VALUES ('58', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:09'); INSERT INTO `customer` VALUES ('59', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:29'); INSERT INTO `customer` VALUES ('60', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:29'); INSERT INTO `customer` VALUES ('61', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:29'); INSERT INTO `customer` VALUES ('62', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:29'); INSERT INTO `customer` VALUES ('63', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:30'); INSERT INTO `customer` VALUES ('64', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:30'); INSERT INTO `customer` VALUES ('65', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:30'); INSERT INTO `customer` VALUES ('66', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:30'); INSERT INTO `customer` VALUES ('67', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:30'); INSERT INTO `customer` VALUES ('68', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:30'); INSERT INTO `customer` VALUES ('69', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:31'); INSERT INTO `customer` VALUES ('70', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:31'); INSERT INTO `customer` VALUES ('71', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:31'); INSERT INTO `customer` VALUES ('72', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:31'); INSERT INTO `customer` VALUES ('73', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:31'); INSERT INTO `customer` VALUES ('74', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:32'); INSERT INTO `customer` VALUES ('75', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:32'); INSERT INTO `customer` VALUES ('76', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:32'); INSERT INTO `customer` VALUES ('77', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:32'); INSERT INTO `customer` VALUES ('78', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:32'); INSERT INTO `customer` VALUES ('79', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:32'); INSERT INTO `customer` VALUES ('80', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:33'); INSERT INTO `customer` VALUES ('81', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:33'); INSERT INTO `customer` VALUES ('82', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:33'); INSERT INTO `customer` VALUES ('83', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:33'); INSERT INTO `customer` VALUES ('84', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:33'); INSERT INTO `customer` VALUES ('85', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:33'); INSERT INTO `customer` VALUES ('86', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:34'); INSERT INTO `customer` VALUES ('87', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:34'); INSERT INTO `customer` VALUES ('88', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:34'); INSERT INTO `customer` VALUES ('89', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:34'); INSERT INTO `customer` VALUES ('90', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:34'); INSERT INTO `customer` VALUES ('91', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:34'); INSERT INTO `customer` VALUES ('92', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:35'); INSERT INTO `customer` VALUES ('93', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:35'); INSERT INTO `customer` VALUES ('94', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:35'); INSERT INTO `customer` VALUES ('95', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:35'); INSERT INTO `customer` VALUES ('96', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:35'); INSERT INTO `customer` VALUES ('97', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:36'); INSERT INTO `customer` VALUES ('98', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:36'); INSERT INTO `customer` VALUES ('99', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:36'); INSERT INTO `customer` VALUES ('100', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:36'); INSERT INTO `customer` VALUES ('101', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:36'); INSERT INTO `customer` VALUES ('102', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:36'); INSERT INTO `customer` VALUES ('103', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:37'); INSERT INTO `customer` VALUES ('104', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:37'); INSERT INTO `customer` VALUES ('105', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:37'); INSERT INTO `customer` VALUES ('106', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:37'); INSERT INTO `customer` VALUES ('107', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:37'); INSERT INTO `customer` VALUES ('108', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:38'); INSERT INTO `customer` VALUES ('109', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:38'); INSERT INTO `customer` VALUES ('110', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:38'); INSERT INTO `customer` VALUES ('111', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:38'); INSERT INTO `customer` VALUES ('112', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:38'); INSERT INTO `customer` VALUES ('113', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:38'); INSERT INTO `customer` VALUES ('114', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:39'); INSERT INTO `customer` VALUES ('115', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:39'); INSERT INTO `customer` VALUES ('116', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:39'); INSERT INTO `customer` VALUES ('117', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:39'); INSERT INTO `customer` VALUES ('118', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:39'); INSERT INTO `customer` VALUES ('119', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:40'); INSERT INTO `customer` VALUES ('120', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:40'); INSERT INTO `customer` VALUES ('121', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:40'); INSERT INTO `customer` VALUES ('122', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:40'); INSERT INTO `customer` VALUES ('123', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:40'); INSERT INTO `customer` VALUES ('124', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:40'); INSERT INTO `customer` VALUES ('125', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:41'); INSERT INTO `customer` VALUES ('126', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:41'); INSERT INTO `customer` VALUES ('127', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:41'); INSERT INTO `customer` VALUES ('128', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:41'); INSERT INTO `customer` VALUES ('129', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:41'); INSERT INTO `customer` VALUES ('130', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:42'); INSERT INTO `customer` VALUES ('131', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:42'); INSERT INTO `customer` VALUES ('132', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:42'); INSERT INTO `customer` VALUES ('133', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:42'); INSERT INTO `customer` VALUES ('134', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:42'); INSERT INTO `customer` VALUES ('135', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:42'); INSERT INTO `customer` VALUES ('136', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:43'); INSERT INTO `customer` VALUES ('137', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:43'); INSERT INTO `customer` VALUES ('138', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:43'); INSERT INTO `customer` VALUES ('139', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:43'); INSERT INTO `customer` VALUES ('140', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:43'); INSERT INTO `customer` VALUES ('141', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:44'); INSERT INTO `customer` VALUES ('142', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:44'); INSERT INTO `customer` VALUES ('143', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:44'); INSERT INTO `customer` VALUES ('144', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:44'); INSERT INTO `customer` VALUES ('145', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:44'); INSERT INTO `customer` VALUES ('146', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:44'); INSERT INTO `customer` VALUES ('147', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:45'); INSERT INTO `customer` VALUES ('148', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:45'); INSERT INTO `customer` VALUES ('149', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:45'); INSERT INTO `customer` VALUES ('150', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:45'); INSERT INTO `customer` VALUES ('151', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:45'); INSERT INTO `customer` VALUES ('152', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:46'); INSERT INTO `customer` VALUES ('153', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:46'); INSERT INTO `customer` VALUES ('154', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:46'); INSERT INTO `customer` VALUES ('155', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:46'); INSERT INTO `customer` VALUES ('156', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:46'); INSERT INTO `customer` VALUES ('157', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:46'); INSERT INTO `customer` VALUES ('158', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('159', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('160', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('161', '周敏鹤', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('162', '??', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('173', '你好', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('164', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('165', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('166', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('167', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('168', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('169', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('170', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('171', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('172', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('173', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('174', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('175', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('176', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('177', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('178', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); INSERT INTO `customer` VALUES ('179', 'aa', NULL, NULL, '6', '2', '22', 'ZAP', '0108888887', '13888888888', '123456', '电子科技大学', '2016-04-08 16:32:47'); 3.2 创建工程笔者使用的开发工具是InteliJ IDEA，首先，新建一个工程，如果你想在已有工程下搭建的话，就新建一个module，如图新建好了之后接下来就是对ProjectStructure进行配置，详细的内容可以参考笔者之前的文章Setup your Tomcat server on IDEA,接下来导入相关的jar包，如下图所示 接下来创建工程的目录结构，其中config文件夹需要标注为源文件目录，如下图 然后在config文件夹中添加配置文件，其中db.properties是数据库连接的配置文件，log4j.properties是Apache组织给出的开源日志配置文件，这个能让你更好地去观察程序运行的日志。 在config目录下新建MyBatis的全局配置文件SqlMapConfig.xml123456789101112131415161718&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;settings&gt; &lt;!-- Globally enables or disables any caches configured in any mapper under this configuration --&gt; &lt;setting name="cacheEnabled" value="false"/&gt; &lt;!-- Sets the number of seconds the driver will wait for a response from the database --&gt; &lt;setting name="defaultStatementTimeout" value="5"/&gt; &lt;!-- Enables automatic mapping from classic database column names A_COLUMN to camel case classic Java property names aColumn --&gt; &lt;setting name="mapUnderscoreToCamelCase" value="true"/&gt; &lt;!-- Allows JDBC support for generated keys. A compatible driver is required. This setting forces generated keys to be used if set to true, as some drivers deny compatibility but still work --&gt; &lt;setting name="useGeneratedKeys" value="true"/&gt; &lt;/settings&gt;&lt;/configuration&gt; 由下往上，接下来配置Spring相关的文件，新建ApplicationContext-dao.xml，这里面需要配置数据库连接文件，数据库连接池，管理MyBatis的会话工厂sqlSessionFactory，加载MyBatis全局配置文件，最后一个是配置Mapper扫描器，作用是建立起dao目录下的接口与xml配置文件之间的映射关系。12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"&gt; &lt;!--配置数据库连接文件db.properties--&gt; &lt;context:property-placeholder location="classpath:db.properties"/&gt; &lt;!--配置数据库连接池--&gt; &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt; &lt;property name="driverClassName" value="$&#123;jdbc.driver&#125;"/&gt; &lt;property name="url" value="$&#123;jdbc.url&#125;?useUnicode=true&amp;amp;characterEncoding=UTF-8"/&gt; &lt;property name="username" value="$&#123;jdbc.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt; &lt;property name="maxActive" value="10"/&gt; &lt;property name="maxIdle" value="5"/&gt; &lt;/bean&gt; &lt;!--会话工厂--&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;!--引入数据源--&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;!--加载MyBatis全局配置文件--&gt; &lt;property name="configLocation" value="classpath:SqlMapConfig.xml"/&gt; &lt;/bean&gt; &lt;!--配置Mapper扫描器--&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="minhe.dao"/&gt; &lt;/bean&gt;&lt;/beans&gt; 新建ApplicationContext-service.xml，配置注解扫描，因为在service层会使用到注解注入的方式123456789101112131415161718&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"&gt; &lt;context:component-scan base-package="minhe.service"/&gt;&lt;/beans&gt; 新建ApplicationContext-trans.xml，配置事务管理器，并定义通知以及配置切面12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"&gt; &lt;!--配置事务管理器--&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;!--引用数据源--&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!--通知--&gt; &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt; &lt;tx:attributes&gt; &lt;!--传播行为--&gt; &lt;tx:method name="save*" propagation="REQUIRED"/&gt; &lt;tx:method name="insert*" propagation="REQUIRED"/&gt; &lt;tx:method name="delete*" propagation="REQUIRED"/&gt; &lt;tx:method name="update*" propagation="REQUIRED"/&gt; &lt;tx:method name="find*" propagation="SUPPORTS" read-only="true"/&gt; &lt;tx:method name="get*" propagation="SUPPORTS" read-only="true"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!--配置切面--&gt; &lt;aop:config&gt; &lt;aop:advisor advice-ref="txAdvice" pointcut="execution(* minhe.service.*.*(..))"/&gt; &lt;/aop:config&gt;&lt;/beans&gt; 新建ApplicationContext-SpringMVC.xml，这里分别引入了字典源文件，controller层的注解扫描，配置注解驱动，视图解析器，自定义日期转换器。123456789101112131415161718192021222324252627282930313233&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt; &lt;!--引入字典资源文件--&gt; &lt;context:property-placeholder location="classpath:source.properties"/&gt; &lt;!--配置controller注解扫描--&gt; &lt;context:component-scan base-package="minhe.controller"/&gt; &lt;!--配置注解驱动--&gt; &lt;mvc:annotation-driven conversion-service="conversionService"/&gt; &lt;!--配置视图解析器--&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="prefix" value="/WEB-INF/jsp/"/&gt; &lt;property name="suffix" value=".jsp"/&gt; &lt;/bean&gt; &lt;!--配置自定义的转换器--&gt; &lt;bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"&gt; &lt;property name="converters"&gt; &lt;set&gt; &lt;bean class="minhe.controller.converter.CustomGlobalStrToDateConverter"/&gt; &lt;/set&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; 最后配置web.xml文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0"&gt; &lt;!--解决post请求乱码--&gt; &lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!--spring监听--&gt; &lt;display-name&gt;springmvc-web&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;!--加载spring容器--&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:ApplicationContext-*.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!--SpringMvc的前端控制器--&gt; &lt;servlet&gt; &lt;servlet-name&gt;SpringMVC.xml&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:SpringMVC.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;SpringMVC.xml&lt;/servlet-name&gt; &lt;url-pattern&gt;*.action&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 以上所有文件配置完成如下图 在src目录下的工程结构中，新建以下文件 添加静态网页文件至web文件夹下，以及在WEB-INF下添加customer.jsp文件 至此，整个工程的配置文件以及目录文件结构全部搭建完成。本文工程 本文作者：MinheZ 版权声明：转载请注明出处！]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Intellij IDEA Spring aop 报错 BeanCreationException: Error creating bean with name]]></title>
    <url>%2F2018%2F11%2F05%2FIntellij-IDEA-Spring-aop-%E6%8A%A5%E9%94%99-BeanCreationException-Error-creating-bean-with-name%2F</url>
    <content type="text"><![CDATA[笔者习惯使用InteliJ IDEA开发工具写Java代码。但是在使用Spring aop或者是aspectj框架时可能遇到如下错误，此处仅提取跟代码相关的关键地方。 123java.lang.IllegalStateException: Failed to load ApplicationContextCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'customerDao' defined in class path resource [applicationContext2.xml]: BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.aspectj.AspectJPointcutAdvisor#0': Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.aop.aspectj.AspectJPointcutAdvisor]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: Could not initialize class org.aspectj.util.LangUtil 原因是Spring编程必须手动导入spring-aop.jar, aspectjrt.jar, aopalliance_1.0.jar, aspectjweaver-1.9.1.jar这4个jar包。 下载地址 提取码：dexw 本文作者：MinheZ 版权声明：转载请注明出处！]]></content>
      <categories>
        <category>Intellij IDEA Spring aop ERROR！</category>
      </categories>
      <tags>
        <tag>Intellij IDEA Spring aop ERROR！</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring 框架之IoC]]></title>
    <url>%2F2018%2F10%2F30%2FSpring4_day01%2F</url>
    <content type="text"><![CDATA[Spring框架 Spring框架的学习路线 1. Spring第一天：Spring的IOC容器之XML的方式，Spring框架与Web项目整合 2. Spring第二天：Spring的IOC容器之注解的方式，Spring的AOP技术 3. Spring第三天：Spring的事务管理、Spring框架的JDBC模板 4. Spring第四天：SSH三大框架的整合 内容概述 1. Spring框架的概述 2. SpringIOC的快速入门 3. IoC容器XML的方式 4. 在web项目中集成Spring 案例一：使用Spring的IOC技术完成客户的保存功能 需求分析 1. 使用Spring的IOC技术完成客户的保存功能 技术分析之Spring框架的概述和入门 技术分析之什么是Spring框架 1. Spring框架的概述 * Spring是一个开源框架 * Spring是于2003 年兴起的一个轻量级的Java开发框架，由Rod Johnson在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。 * 它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。 * Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以 从Spring中受益。 * Spring的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring是一个分层的JavaSE/EEfull-stack(一站式) 轻量级开源框架。 * EE开发分成三层结构 * WEB层 -- Spring MVC * 业务层 -- Bean管理:(IOC) * 持久层 -- Spring的JDBC模板.ORM模板用于整合其他的持久层框架 技术分析之Spring框架的特点 1. 为什么要学习Spring的框架 * 方便解耦，简化开发 * Spring就是一个大工厂，可以将所有对象创建和依赖关系维护，交给Spring管理 * AOP编程的支持 * Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能 * 声明式事务的支持 * 只需要通过配置就可以完成对事务的管理，而无需手动编程 * 方便程序的测试 * Spring对Junit4支持，可以通过注解方便的测试Spring程序 * 方便集成各种优秀框架 * Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts2、Hibernate、MyBatis、Quartz等）的直接支持 * 降低JavaEE API的使用难度 * Spring 对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低 2. Spring框架的版本 * Spring3.x和Spring4.x的版本 技术分析之Spring框架的IOC核心功能快速入门 1. 什么是IOC的功能？ * IoC -- Inverse of Control，控制反转，将对象的创建权反转给Spring！！ * 使用IOC可以解决的程序耦合性高的问题！！ 2. 步骤一：下载Spring框架的开发包 * 官网：http://spring.io/ * 下载地址：http://repo.springsource.org/libs-release-local/org/springframework/spring解压:(Spring目录结构:) * docs -- API和开发规范 * libs -- jar包和源码 * schema -- 约束 3. 步骤二：创建JavaWEB项目，引入Spring的开发包 * 引入Spring框架IOC核心功能需要的具体的jar包 * Spring框架的IOC的功能，那么根据Spring框架的体系结构图能看到，只需要引入如下的jar包 * Beans * Core * Context * Expression Language * Spring框架也需要引入日志相关的jar包 * 在spring-framework-3.0.2.RELEASE-dependencies/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1 * com.springsource.org.apache.commons.logging-1.1.1.jar * 还需要引入log4j的jar包 spring-framework-3.0.2.RELEASE-dependencies\org.apache.log4j\com.springsource.org.apache.log4j\1.2.15 * com.springsource.org.apache.log4j-1.2.15.jar 4. 步骤三：创建对应的包结构，编写Java的类，要注意：以后使用Spring框架做开发，都需要来编写接口与实现类！！ * com.itcast.demo1 * UserService -- 接口 * UserServiceImpl -- 具体的实现类 5. 步骤四：想把UserServiceImpl实现类的创建交给Spring框架来管理，需要创建Spring框架的配置文件，完成配置 * 在src目录下创建applicationContext.xml的配置文件，名称是可以任意的，但是一般都会使用默认名称！！ * 引入spring的约束，需要先找到具体的约束头信息！！ * spring-framework-3.2.0.RELEASE\docs\spring-framework-reference\html\xsd-config.html * 具体的约束如下： &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;/beans&gt; * 完成UserService的配置 &lt;!-- Spring的快速入门 --&gt; &lt;bean id=&quot;userService&quot; class=&quot;com.itcast.demo1.UserServiceImpl&quot;/&gt; 6. 步骤五：编写测试程序，采用Spring框架的工厂方式来获取到UserService接口的具体实现类！！ public void demo2(){ // 使用Spring的工厂: ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;); // 通过工厂获得类: UserService userService = (UserService) applicationContext.getBean(&quot;userService&quot;); userService.sayHello(); } 入门总结之Spring框架中的工厂（了解） 1. ApplicationContext接口 * 使用ApplicationContext工厂的接口，使用该接口可以获取到具体的Bean对象 * 该接口下有两个具体的实现类 * ClassPathXmlApplicationContext -- 加载类路径下的Spring配置文件 * FileSystemXmlApplicationContext -- 加载本地磁盘下的Spring配置文件 2. BeanFactory工厂（是Spring框架早期的创建Bean对象的工厂接口） * 使用BeanFactory接口也可以获取到Bean对象 public void run(){ BeanFactory factory = new XmlBeanFactory(new ClassPathResource(&quot;applicationContext.xml&quot;)); UserService us = (UserService) factory.getBean(&quot;us&quot;); us.sayHello(); } * BeanFactory和ApplicationContext的区别 * BeanFactory -- BeanFactory采取延迟加载，第一次getBean时才会初始化Bean * ApplicationContext -- 在加载applicationContext.xml时候就会创建具体的Bean对象的实例，还提供了一些其他的功能 * 事件传递 * Bean自动装配 * 各种不同应用层的Context实现 入门总结之配置Spring框架编写XML的提示 1. 步骤一：先复制， http://www.springframework.org/schema/beans/spring-beans.xsd 2. 步骤二：搜索XML Catalog，点击Add按钮 3. 步骤三：先选择Location的schema的约束地址 * E:\class\2016\JavaEE28\day35_Spring框架第一天\资料\spring-framework-4.2.4.RELEASE-schema\beans\spring-beans-4.2.xsd 4. 步骤四：注意：Key type要选择：Schema location 5. 步骤五：Key把http://www.springframework.org/schema/beans/spring-beans.xsd复制上 技术分析之Spring框架的Bean管理的配置文件方式 技术分析之Spring框架中标签的配置 1. id属性和name属性的区别 * id -- Bean起个名字，在约束中采用ID的约束，唯一 * 取值要求：必须以字母开始，可以使用字母、数字、连字符、下划线、句话、冒号 id:不能出现特殊字符 * name -- Bean起个名字，没有采用ID的约束（了解） * 取值要求：name:出现特殊字符.如果&lt;bean&gt;没有id的话 , name可以当做id使用 * Spring框架在整合Struts1的框架的时候，Struts1的框架的访问路径是以/开头的，例如：/bookAction 2. class属性 -- Bean对象的全路径 3. scope属性 -- scope属性代表Bean的作用范围 * singleton -- 单例（默认值） * prototype -- 多例，在Spring框架整合Struts2框架的时候，Action类也需要交给Spring做管理，配置把Action类配置成多例！！ * request -- 应用在Web项目中,每次HTTP请求都会创建一个新的Bean * session -- 应用在Web项目中,同一个HTTP Session 共享一个Bean * globalsession -- 应用在Web项目中,多服务器间的session 4. Bean对象的创建和销毁的两个属性配置（了解） * 说明：Spring初始化bean或销毁bean时，有时需要作一些处理工作，因此spring可以在创建和拆卸bean的时候调用bean的两个生命周期方法 * init-method -- 当bean被载入到容器的时候调用init-method属性指定的方法 * destroy-method -- 当bean从容器中删除的时候调用destroy-method属性指定的方法 * 想查看destroy-method的效果，有如下条件 * scope= singleton有效 * web容器中会自动调用，但是main函数或测试用例需要手动调用（需要使用ClassPathXmlApplicationContext的close()方法） 技术分析之依赖注入（DI） 1. IOC和DI的概念 * IOC -- Inverse of Control，控制反转，将对象的创建权反转给Spring！！ * DI -- Dependency Injection，依赖注入，在Spring框架负责创建Bean对象时，动态的将依赖对象注入到Bean组件中！！ 2. DI（依赖注入） * 例如：如果UserServiceImpl的实现类中有一个属性，那么使用Spring框架的IOC功能时，可以通过依赖注入把该属性的值传入进来！！ * 具体的配置如下 &lt;bean id=&quot;us&quot; class=&quot;com.itheima.demo1.UserServiceImpl&quot;&gt; &lt;property name=&quot;uname&quot; value=&quot;小风&quot;/&gt; &lt;/bean&gt; 技术分析之Spring框架的属性注入 1. 对于类成员变量，常用的注入方式有两种 * 构造函数注入 * 属性setter方法注入 2. 在Spring框架中提供了前两种的属性注入的方式 1. 构造方法的注入方式，两步 * 编写Java的类，提供构造方法 public class Car { private String name; private double money; public Car(String name, double money) { this.name = name; this.money = money; } @Override public String toString() { return &quot;Car [name=&quot; + name + &quot;, money=&quot; + money + &quot;]&quot;; } } * 编写配置文件 &lt;bean id=&quot;car&quot; class=&quot;com.itheima.demo4.Car&quot;&gt; &lt;constructor-arg name=&quot;name&quot; value=&quot;大奔&quot;/&gt; &lt;constructor-arg name=&quot;money&quot; value=&quot;100&quot;/&gt; &lt;/bean&gt; 2. 属性的setter方法的注入方式 * 编写Java的类，提供属性和对应的set方法即可 * 编写配置文件 3. 如果Java类的属性是另一个Java的类，那么需要怎么来注入值呢？ * &lt;property name=&quot;name&quot; rel=&quot;具体的Bean的ID或者name的值&quot;/&gt; * 例如： &lt;bean id=&quot;person&quot; class=&quot;com.itheima.demo4.Person&quot;&gt; &lt;property name=&quot;pname&quot; value=&quot;美美&quot;/&gt; &lt;property name=&quot;car2&quot; ref=&quot;car2&quot;/&gt; &lt;/bean&gt; 技术分析之Spring的2.5版本中提供了一种:p名称空间的注入（了解） 1. 步骤一：需要先引入 p 名称空间 * 在schema的名称空间中加入该行：xmlns:p=&quot;http://www.springframework.org/schema/p&quot; 2. 步骤二：使用p名称空间的语法 * p:属性名 = &quot;&quot; * p:属性名-ref = &quot;&quot; 3. 步骤三：测试 * &lt;bean id=&quot;person&quot; class=&quot;com.itheima.demo4.Person&quot; p:pname=&quot;老王&quot; p:car2-ref=&quot;car2&quot;/&gt; 技术分析之Spring的3.0提供了一种:SpEL注入方式（了解） 1. SpEL：Spring Expression Language是Spring的表达式语言，有一些自己的语法 2. 语法 * #{SpEL} 3. 例如如下的代码 &lt;!-- SpEL的方式 --&gt; &lt;bean id=&quot;person&quot; class=&quot;com.itheima.demo4.Person&quot;&gt; &lt;property name=&quot;pname&quot; value=&quot;#{&apos;小风&apos;}&quot;/&gt; &lt;property name=&quot;car2&quot; value=&quot;#{car2}&quot;/&gt; &lt;/bean&gt; 4. 还支持调用类中的属性或者方法 * 定义类和方法，例如 public class CarInfo { public String getCarname(){ return &quot;奇瑞QQ&quot;; } } 技术分析之数组，集合(List,Set,Map)，Properties等的注入 1. 如果是数组或者List集合，注入配置文件的方式是一样的 &lt;bean id=&quot;collectionBean&quot; class=&quot;com.itheima.demo5.CollectionBean&quot;&gt; &lt;property name=&quot;arrs&quot;&gt; &lt;list&gt; &lt;value&gt;美美&lt;/value&gt; &lt;value&gt;小风&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; 2. 如果是Set集合，注入的配置文件方式如下： &lt;property name=&quot;sets&quot;&gt; &lt;set&gt; &lt;value&gt;哈哈&lt;/value&gt; &lt;value&gt;呵呵&lt;/value&gt; &lt;/set&gt; &lt;/property&gt; 3. 如果是Map集合，注入的配置方式如下： &lt;property name=&quot;map&quot;&gt; &lt;map&gt; &lt;entry key=&quot;老王2&quot; value=&quot;38&quot;/&gt; &lt;entry key=&quot;凤姐&quot; value=&quot;38&quot;/&gt; &lt;entry key=&quot;如花&quot; value=&quot;29&quot;/&gt; &lt;/map&gt; &lt;/property&gt; 4. 如果是properties属性文件的方式，注入的配置如下： &lt;property name=&quot;pro&quot;&gt; &lt;props&gt; &lt;prop key=&quot;uname&quot;&gt;root&lt;/prop&gt; &lt;prop key=&quot;pass&quot;&gt;123&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; 技术分析之Spring框架的配置文件分开管理（了解） 1. 例如：在src的目录下又多创建了一个配置文件，现在是两个核心的配置文件，那么加载这两个配置文件的方式有两种！ * 主配置文件中包含其他的配置文件: &lt;import resource=&quot;applicationContext2.xml&quot;/&gt; * 工厂创建的时候直接加载多个配置文件: ApplicationContext applicationContext = new ClassPathXmlApplicationContext( &quot;applicationContext.xml&quot;,&quot;applicationContext2.xml&quot;); Spring框架整合WEB Spring框架整合WEB（不是最终的方案） 1. 创建JavaWEB项目，引入Spring的开发包。编写具体的类和方法。 * 环境搭建好后，启动服务器来测试项目，发送每访问一次都会加载一次配置文件，这样效率会非常非常慢！！ 2. 解决上面的问题 * 将工厂创建好了以后放入到ServletContext域中.使用工厂的时候,从ServletContext中获得. * ServletContextListener:用来监听ServletContext对象的创建和销毁的监听器. * 当ServletContext对象创建的时候:创建工厂 , 将工厂存入到ServletContext 3. Spring整合Web项目 * 引入spring-web-4.2.4.RELEASE.jar包 * 配置监听器 &lt;!-- 配置Spring的核心监听器: --&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; 4. 修改servlet的代码 * 从ServletContext中获得工厂 * 具体代码如下 ServletContext servletContext = ServletActionContext.getServletContext(); // 需要使用WEB的工厂的方式 WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(servletContext); CustomerService cs = (CustomerService) context.getBean(&quot;customerService&quot;); cs.save(); 本文作者：MinheZ 版权声明：转载请注明出处！]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setup your Tomcat server on IDEA]]></title>
    <url>%2F2018%2F10%2F26%2FSetup-your-Tomcat-server-on-IDEA%2F</url>
    <content type="text"><![CDATA[如何在InteliJ上配置Tomcat进行web开发1.写在前面最近开始接触Java当中的web开发，由于习惯了InteliJ的“智能操作”，于是自己花了一整天研究如何在InteliJ上面部署Tomcat的servlet项目（忽视笔者太菜），在此记录搭建的操作流程，希望帮到跟我一样刚入门的人，少走弯路~ 2.正式开始，新建工程首先，新建一个工程，如下图 选择Java下面的JavaEE，勾选Web Application，如下图，下面的版本默认勾选create web.xml，接着点next 然后是项目名称，这里我写TomcatTest，路径可以自由选择，点击Finish 接下来点击File-Project Structure进入项目结构 Project栏保持默认设置就行，如图 接下来module栏，选中Source，在WEB-INF上右键，新建文件夹，分别命名为classes和lib，分别用来存放项目编译后输出的class文件和外部jar包，如下图 然后点击Paths，在compiler output下面按如下图勾选，选择刚才新建classes文件夹的路径存放项目编译后输出的class文件 在Dependencies点击右边“+”号，选择JARs or directories,选择之前新建的lib文件夹目录 再点击 Jar Directories 继续点OK就行，以后第三方的Jar包就存放在此（例如dbutils等工具类的开发包）。接下来在Libraries点击“+”，如下图点击，添加的目录为你的Apache-Tomcat安装文件路径下的lib 再点击Artifacts，如下图，Output Directories可以定义其它的web项目部署路径。例如我这里的F:\Server\apache-tomcat-9.0.12\webapps\TomcatTest。注意：应该新建一个文件夹，名称就按照工程名就行。如果下面出现感叹号，点击fix新建一个lib文件夹就行，这些问题都不大~点击Apply，OK就行了。 3.Tomcat Configuration设置接下来进行Tomcat Configuration设置，按如下图标注的顺序依次点击，服务器点击local就行 接下来设置，如图，Name我直接设置的工程名字。Application server点击右边的Configture Tomcat Home直接打开文件夹，定位到你Tomcat在硬盘中存放的位置就行，然后点击OK~，这个你只要设置一次就行了，后面的工程都会自动生成。 下面的Tomcat Server Setting保持默认设置就可以了。（想修改也行，HTTP port可以设置为1024之内的80，或者65536之内的其它端口号，只要不与其它程序冲突就行，建议默认设置）。 接下来设置部署 这里有一点很奇怪，Application context我设置为工程名就没问题，设置为其它的，例如/hello，在IDEA后续部署servlet就会出现404报错，不思其解~ Apply—OK就完成了。 打开web文件夹下的index.jsp，修改标题和内容（内容随意==），如下图， 再点击右上角Run，就能部署成功。 4.部署servlet到Tomcat服务器在src下新建如下类，名字自定义 这里测试的是servlet下，服务器是否能接收到网页的请求（request），以及服务器对网页请求作出的响应（response），测试的程序清单如下： 12345678910111213// HelloServletpackage minhe.HelloServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class HelloServlet extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest request, HttpServletResponse response)&#123; System.out.println("收到"); &#125;&#125; 1234567891011121314151617// RequestServletpackage minhe.RequestServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class RequestServlet extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; response.setContentType("text/html;charset=utf-8"); String value = request.getParameter("username"); System.out.println(value); response.getWriter().print("数据" + value); &#125;&#125; 重新配置index.jsp文件，如下 123456789&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;MyFirstWeb&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;a href="http://localhost:8080/TomcatTest/request?username=tom"&gt;b_请求参数&lt;/a&gt; &lt;/body&gt;&lt;/html&gt; 服务器配置文件web.xml如下： 1234567891011121314151617181920212223&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0"&gt; &lt;servlet&gt; &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;minhe.HelloServlet.HelloServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet&gt; &lt;servlet-name&gt;RequestServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;minhe.RequestServlet.RequestServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;RequestServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/request&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 注意：上述代码不能出错。运行结果如下图，点击网页中的超链接，将会跳转到“数据：tom”页面，同时服务器会接收到Tom字样，证明请求和应答正常。 至此服务器配置完成。Enjoying~ 本文作者：MinheZ 版权声明：转载请注明出处！]]></content>
      <categories>
        <category>Tomcat Service</category>
      </categories>
      <tags>
        <tag>Tomcat Service</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Create your blog on GitHub]]></title>
    <url>%2F2018%2F10%2F16%2FCreate-your-blog-on-GitHub%2F</url>
    <content type="text"><![CDATA[声明：本文将介绍如何在github上面发表自己的博客。笔者在windows10 64位系统下操作，其它系统仅供参考。 1 搭建环境首先需要下载2个软件 12node.Jsgit 下载地址：node.Js gitMore info: Writing 具体的下载，安装就不用多说了，基本上下载完默认安装即可，安装的路径最好先记住。Git 安装的时候会弹出下面的窗口，我们选择第二个即可。这样我们在Windows的命令窗口也可以进行Git操作了。 两个都安装完成之后，打开git bash分别输入node-v、npm -v和git–version，这3个命令能看到我们刚才安装软件的版本，如下图，即可进入下一个步骤。 2 配置GitHub2.1 注册GitHub 在GitHub 官网注册一个账号。 2.2 SSH授权2.2.1 生成SSH Key1打开Git Bash，输入ssh-keygen -t rsa 按3下回车（此处跳过密码设置），由于我已经设置过了，这里选择不覆盖。 接着就会在C:\Users\Administrator.ssh目录下生成到id_rsa和id_rsa.pub两个文件，id_rsa是密钥，id_rsa.pub是公钥，接下来需要将id_rsa.pub的内容添加到GitHub上，这样本地的id_rsa密钥才能跟GitHub上的id_rsa.pub公钥进行配对，才能够授权成功。 2.2.2 在GitHub上添加SSH Key在个人主页右上角上点击倒三角，进入Setting点击new SSH key，再把刚才的公钥复制粘贴进去。SSHKey添加成功之后，可以输入ssh-T git@github.com进行测试，出现以下图片样式则证明成功。 创建GitHub仓库这一波比较关键！！！下图是新建一个repositories（仓库），此处注意项目的名称一定是：你的名字+.github.io，例如笔者的是MinheZ.github.io。 4 设置本地博客的配置4.1 安装Hexo在一个合适的地方创建一个文件夹，然后再文件夹空白处按住Shift+鼠标右键，在此处打开Git bash命令行窗口1在命令行输入 npm install -g hexo 注意：笔者在此过程中遇到过 E404报错，详细内容忘记截图=。=，原因是npm在国内被墙，使用镜像服务器就可以了，此处仅为读者提供一种思路，并不一定是有效方法。1npm install -g hexo --registry=https://registry.npm.taobao.org 然后1输入 npm install hexo --save 可以输入1hexo -v 来检查hexo是否安装成功 4.2 初始化Hexo在命令窗口中继续输入1hexo init，等待下载好之后输入hexo s 此时打开浏览器在地址栏输入 http://localhost:4000/ 就能看到自己搭建的本地博客 博客文章放在文件夹下面sorcerer/_posts文件夹，再进入看到一篇初始化hello-world.md。如果需要新建文章的话，在命令窗口输入1hexo new 'filename' 4.3 发布博客复制我们Github项目地址，打开新建文件夹下面生成的_config.yml文件，在最下方修改注意：repo自己加上就好。冒号后面追加一个空格！接下来回到命令窗口，输入1npm install hexo-deployer-git --save 安装好Git上传插件之后，输入 hexo g，然后输入 hexo d就可以将我们的博客上传到我们的GitHub了，而且以后更新文章就只需要用这两个命令就可以了。这样别人也可以通过 https://yourname.github.io 来访问我们的博客了（开头一定要用https，yourname是你的github的名字）。 5 主题太丑怎么办命令行输入1git clone https://github.com/iissnan/hexo-theme-next themes/next 等待下载完成之后，打开配置文件_config_yml，找到theme将next替换原来默认的landscape。然后在命令窗口下1输入 hexo clean, hexo g, hexo s, 本地确认样子之后再hexo d部署至GitHub 至此，博客环境就搭建完成，谢谢观看！ 本文作者：MinheZ 版权声明：转载请注明出处！]]></content>
      <categories>
        <category>Hexo博客环境搭建</category>
      </categories>
      <tags>
        <tag>博客环境搭建</tag>
      </tags>
  </entry>
</search>
